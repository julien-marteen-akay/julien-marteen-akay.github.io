---
import type { HTMLAttributes } from 'astro/types';

// Simplify props, remove complex Omit/& 
interface Props {
  text: string;
  href?: string;
  color?: 'cyan' | 'yellow' | 'magenta' | 'blue' | 'orange' | 'green' | 'red';
  variant?: 'solid' | 'outline';
  target?: string;
  rel?: string;
  type?: 'button' | 'submit' | 'reset';
  class?: string | Record<any, any> | Iterable<any>; // Keep class for styling
}

// Define the allowed color prop values
type ColorProp = 'cyan' | 'yellow' | 'magenta' | 'blue' | 'orange' | 'green' | 'red';
// Define the keys used in the colorStyles object (our palette names)
type PaletteKey = 'accent_cyan' | 'accent_yellow' | 'accent_magenta' | 'accent_blue' | 'accent_orange' | 'accent_green' | 'accent_red';

const { 
  text,
  href,
  color = 'cyan', // Keep prop names simple (cyan, yellow, magenta)
  variant = 'solid',
  target,
  rel,
  type,
  class: className // Use className for the class prop
} = Astro.props as Props;

// Explicitly type the color map
const colorMap: Record<ColorProp, PaletteKey> = {
  cyan: 'accent_cyan',
  yellow: 'accent_yellow',
  magenta: 'accent_magenta',
  blue: 'accent_blue',
  orange: 'accent_orange',
  green: 'accent_green',
  red: 'accent_red',
};
// Ensure the resulting key is of the correct type
const paletteKey: PaletteKey = colorMap[color as ColorProp] || 'accent_cyan'; 

const baseStyles = "inline-block px-4 py-3 sm:px-6 sm:py-3 rounded-lg font-semibold transition-all duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-dark text-center text-sm sm:text-base min-h-[44px] touch-manipulation select-none whitespace-nowrap active:scale-[0.96] sm:active:scale-[0.98]";

const variantStyles = {
  solid: {
    accent_cyan:    `bg-accent_cyan text-gray-900 hover:bg-opacity-90 active:bg-opacity-80 focus:ring-accent_cyan`,
    accent_yellow:  `bg-accent_yellow text-gray-900 hover:bg-opacity-90 active:bg-opacity-80 focus:ring-accent_yellow`,
    accent_green:   `bg-accent_green text-gray-900 hover:bg-opacity-90 active:bg-opacity-80 focus:ring-accent_green`,
    accent_magenta: `bg-accent_magenta text-white hover:bg-opacity-90 active:bg-opacity-80 focus:ring-accent_magenta`,
    accent_blue:    `bg-accent_blue text-white hover:bg-opacity-90 active:bg-opacity-80 focus:ring-accent_blue`,
    accent_orange:  `bg-accent_orange text-white hover:bg-opacity-90 active:bg-opacity-80 focus:ring-accent_orange`,
    accent_red:     `bg-accent_red text-white hover:bg-opacity-90 active:bg-opacity-80 focus:ring-accent_red`,
  },
  outline: {
    accent_cyan:    `border-2 border-accent_cyan text-accent_cyan hover:bg-accent_cyan/20 active:bg-accent_cyan/30 focus:ring-accent_cyan`,
    accent_yellow:  `border-2 border-accent_yellow text-accent_yellow hover:bg-accent_yellow/20 active:bg-accent_yellow/30 focus:ring-accent_yellow`,
    accent_magenta: `border-2 border-accent_magenta text-accent_magenta hover:bg-accent_magenta/20 active:bg-accent_magenta/30 focus:ring-accent_magenta`,
    accent_blue:    `border-2 border-accent_blue text-accent_blue hover:bg-accent_blue/20 active:bg-accent_blue/30 focus:ring-accent_blue`,
    accent_orange:  `border-2 border-accent_orange text-accent_orange hover:bg-accent_orange/20 active:bg-accent_orange/30 focus:ring-accent_orange`,
    accent_green:   `border-2 border-accent_green text-accent_green hover:bg-accent_green/20 active:bg-accent_green/30 focus:ring-accent_green`,
    accent_red:     `border-2 border-accent_red text-accent_red hover:bg-accent_red/20 active:bg-accent_red/30 focus:ring-accent_red`,
  }
};

// Define focus ring colors
const focusRingStyles: Record<PaletteKey, string> = {
  accent_cyan:    `focus:ring-accent_cyan`,
  accent_yellow:  `focus:ring-accent_yellow`,
  accent_magenta: `focus:ring-accent_magenta`,
  accent_blue:    `focus:ring-accent_blue`,
  accent_orange:  `focus:ring-accent_orange`,
  accent_green:   `focus:ring-accent_green`,
  accent_red:     `focus:ring-accent_red`,
};

const appliedVariantStyle = variantStyles[variant]?.[paletteKey] || variantStyles.solid.accent_cyan;
const appliedFocusStyle = focusRingStyles[paletteKey] || focusRingStyles.accent_cyan;
const appliedStyles = `${baseStyles} ${appliedVariantStyle} ${appliedFocusStyle}`;

// Determine tag based on href presence
const isLink = href !== undefined;
---

{/* Use simple template without pseudo-element class or data-attr */}
{isLink ? (
  <a 
    href={href}
    target={target || '_blank'} 
    rel={rel || 'noopener noreferrer'}
    class:list={[appliedStyles, className]} 
  >
    {text}
  </a>
) : (
  <button 
    type={type || "button"}
    class:list={[appliedStyles, className]} 
  >
    {text}
  </button>
)} 